#!/usr/bin/env python3
"""
Script de test pour l'assistant unifi√©
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from agent.assistant import SQLAssistant
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_assistant():
    """Test de base de l'assistant unifi√©"""
    print("üß™ Test de l'Assistant Unifi√©")
    print("=" * 50)
    
    try:
        # Initialisation
        print("1. Initialisation de l'assistant...")
        assistant = SQLAssistant()
        print("   ‚úÖ Assistant initialis√©")
        
        # Test de connexion DB
        print("2. Test de connexion √† la base de donn√©es...")
        if assistant.db:
            print("   ‚úÖ Base de donn√©es connect√©e")
        else:
            print("   ‚ùå Probl√®me de connexion DB")
            return False
        
        # Test de g√©n√©ration SQL simple
        print("3. Test de g√©n√©ration SQL...")
        try:
            sql = assistant.generate_sql_with_ai("Combien d'√©l√®ves sont inscrits?")
            if sql:
                print(f"   ‚úÖ SQL g√©n√©r√©: {sql[:100]}...")
            else:
                print("   ‚ùå Pas de SQL g√©n√©r√©")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur g√©n√©ration SQL: {e}")
        
        # Test question admin
        print("4. Test question admin...")
        try:
            sql_query, response = assistant.ask_question(
                "Combien d'√©l√®ves sont inscrits?", 
                user_id=1, 
                roles=['ROLE_SUPER_ADMIN']
            )
            print(f"   ‚úÖ R√©ponse: {response[:100]}...")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur question admin: {e}")
        
        # Test des m√©thodes utilitaires
        print("5. Test des utilitaires...")
        
        # Test sch√©ma
        if hasattr(assistant, 'schema') and assistant.schema:
            print(f"   ‚úÖ Sch√©ma charg√©: {len(assistant.schema)} tables")
        else:
            print("   ‚ö†Ô∏è Sch√©ma vide")
        
        # Test templates
        if hasattr(assistant, 'templates_questions'):
            print(f"   ‚úÖ Templates charg√©s: {len(assistant.templates_questions)}")
        else:
            print("   ‚ö†Ô∏è Pas de templates")
        
        # Test cache
        if hasattr(assistant, 'cache') and assistant.cache:
            print("   ‚úÖ Cache disponible")
        else:
            print("   ‚ö†Ô∏è Cache indisponible")
        
        print("\nüéâ Tests termin√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_graph_generation():
    """Test de g√©n√©ration de graphiques"""
    print("\nüìä Test de G√©n√©ration de Graphiques")
    print("=" * 50)
    
    try:
        import pandas as pd
        from agent.assistant import SQLAssistant
        
        assistant = SQLAssistant()
        
        # Donn√©es de test
        test_data = [
            {"classe": "7A1", "nombre": 25},
            {"classe": "7A2", "nombre": 23},
            {"classe": "7B1", "nombre": 27},
            {"classe": "7B2", "nombre": 24}
        ]
        
        df = pd.DataFrame(test_data)
        
        # Test g√©n√©ration graphique en barres
        print("1. Test graphique en barres...")
        graph_data = assistant.generate_auto_graph(df, "bar")
        
        if graph_data and graph_data.startswith("data:image/png;base64,"):
            print("   ‚úÖ Graphique en barres g√©n√©r√©")
        else:
            print("   ‚ùå √âchec g√©n√©ration graphique")
        
        # Test d√©tection automatique
        print("2. Test d√©tection automatique...")
        detected_type = assistant.detect_graph_type("nombre d'√©l√®ves par classe", df.columns.tolist())
        print(f"   ‚úÖ Type d√©tect√©: {detected_type}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test graphiques: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Lancement des tests de l'Assistant Unifi√©")
    
    success = test_assistant()
    
    if success:
        test_graph_generation()
    
    print(f"\n{'‚úÖ TOUS LES TESTS R√âUSSIS' if success else '‚ùå √âCHEC DES TESTS'}")